{"version":3,"sources":["Order.tsx","App.tsx","localStorage.tsx","reportWebVitals.ts","index.tsx"],"names":["Order","props","className","nameOfOrder","hours","minutes","seconds","onClick","deleteOrder","id","App","useState","key","defaultState","state","localStorage","getItem","JSON","parse","restoreState","ordersArray","setOrdersArray","inputText","setInputText","save","saveState","stringify","setItem","orderID","newOrdersArray","filter","order","useEffect","setInterval","newArr","map","date","Date","timeLeft","timeEnd","getHours","getMinutes","getSeconds","timeLeftHours","Math","floor","timeLeftMinutes","timeLeftSeconds","clearInterval","placeholder","type","value","onChange","e","currentTarget","newOrder","v1","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d4c4317.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\ntype OrderProps = {\r\n    nameOfOrder: string\r\n    hours: number\r\n    minutes: number\r\n    seconds: number\r\n    deleteOrder: (id: string) => void\r\n    id: string\r\n}\r\n\r\nfunction Order(props: OrderProps) {\r\n    return(\r\n        <div className={'spanWrapper'}>\r\n            <div>\r\n                <span className={'nameOfOrder'}>{props.nameOfOrder} </span>\r\n            </div>\r\n            <div>\r\n                <span>{props.hours}:</span>\r\n                <span>{props.minutes}:</span>\r\n                <span>{props.seconds}</span>\r\n            </div>\r\n            <div>\r\n                <button className={'buttonDel'} onClick={() => props.deleteOrder(props.id)}>X</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Order","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport Order from \"./Order\";\nimport {v1} from \"uuid\";\nimport {restoreState, saveState} from './localStorage';\n\nexport type OrdersArrayType = Array<TimerType>\n\ntype TimerType = {\n    id: string\n    nameOfOrder: string\n    hours: number\n    minutes: number\n    timeEnd: number\n    seconds: number\n}\n\nfunction App() {\n\n    let defaultOrdersArray: Array<any> = [];\n\n    let [ordersArray, setOrdersArray] = useState<OrdersArrayType>(restoreState('state', defaultOrdersArray));\n    let [inputText, setInputText] = useState<string>('');\n\n    const save = () => {\n        saveState('state', ordersArray);\n    };\n\n\n    const changeNameOrder = (e: ChangeEvent<HTMLInputElement>) => {\n        inputText = e.currentTarget.value;\n        setInputText(inputText)\n    }\n\n    const addUsualOrder = () => {\n        let date = new Date();\n        let timeEnd = (date.getHours()*60) * 60 + date.getMinutes() * 60 + date.getSeconds() + 10800;\n\n        let newOrder: TimerType = {\n            id: v1(),\n            nameOfOrder: inputText,\n            hours: 3,\n            minutes: 0,\n            seconds: 0,\n            timeEnd: timeEnd\n        }\n        setOrdersArray([...ordersArray, newOrder]);\n        setInputText('');\n        save()\n\n    }\n\n    const addExpressOrder = () => {\n        let date = new Date();\n        let timeEnd = (date.getHours()*60) * 60 + date.getMinutes() * 60 + date.getSeconds() + 3600;\n\n        let newOrder: TimerType = {\n            id: v1(),\n            nameOfOrder: inputText,\n            hours: 1,\n            minutes: 0,\n            seconds: 0,\n            timeEnd: timeEnd\n        }\n        setOrdersArray([...ordersArray, newOrder]);\n        setInputText('');\n        save()\n    }\n\n\n    const deleteOrder = (orderID: string) => {\n        let newOrdersArray: OrdersArrayType = ordersArray.filter(order => order.id !== orderID);\n        setOrdersArray(newOrdersArray)\n        save()\n    }\n\n    useEffect(() => {\n        const id = setInterval(() => {\n            let newArr = ordersArray.map(order => {\n\n                if(order.minutes === 0 && order.hours === 0 && order.seconds === 0){\n                    return order\n                } else {\n                    let date = new Date();\n                    let timeLeft = order.timeEnd - ((date.getHours()*60) * 60 + date.getMinutes() * 60 + date.getSeconds());\n                    let timeLeftHours = Math.floor(timeLeft / 3600);\n                    let timeLeftMinutes = Math.floor((timeLeft - (timeLeftHours * 3600)) / 60);\n                    let timeLeftSeconds = (timeLeft - (timeLeftHours * 3600)) % 60;\n                    return {\n                        id: order.id,\n                        nameOfOrder: order.nameOfOrder,\n                        hours: timeLeftHours,\n                        minutes: timeLeftMinutes,\n                        seconds: timeLeftSeconds,\n                        timeEnd: order.timeEnd\n                    }\n                }\n            });\n            setOrdersArray(newArr)\n        }, 1000);\n        return () => clearInterval(id)\n    })\n\n\n    return (\n        <div className=\"App\">\n            <div className={'controlsWrapper'}>\n                <input className={'inputStyle item'} placeholder='Введи номер ЗН' type='text' value={inputText} onChange={changeNameOrder}/>\n                <button className={'expressButton item'} onClick={addExpressOrder}>1 час</button>\n                <button className={'usualButton item'} onClick={addUsualOrder}>3 часа</button>\n            </div>\n\n            <div className={'timersWrapper'}>\n                {\n                    ordersArray.map(order => {\n                        return (\n                            <div>\n                                <Order nameOfOrder={order.nameOfOrder} hours={order.hours} minutes={order.minutes} seconds={order.seconds} deleteOrder={deleteOrder} id={order.id}/>\n                                {save()}\n                            </div>\n\n                        )\n\n                    })\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { OrdersArrayType } from \"./App\";\r\n\r\n\r\nexport function saveState(key: string, state: OrdersArrayType){\r\n    const saveState = JSON.stringify(state);\r\n    localStorage.setItem(key, saveState)\r\n}\r\n\r\n\r\nexport function restoreState(key: string, defaultState: OrdersArrayType) {\r\n    const state = localStorage.getItem(key);\r\n    if (state !== null) defaultState = JSON.parse(state);\r\n    return defaultState;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}